using System;
using System.Security.Cryptography;
using System.IO;
using System.Threading;

namespace AesEncryption
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Creating Aes Encryption XXX bit key");

            Console.WriteLine("Do you want to encrypt or to decrypt ? " + '\n' +
                "1 for encryption 2 for decryption, 3 to do both steps");
            int r = Convert.ToInt32(Console.ReadLine());

            using (Aes aesAlgorithm = Aes.Create())
            {   if (r==3||r==1)
                {
                    Console.WriteLine("Enter the needed key length (in bites), the values can be 128, 192 or 256");

                    int a = Convert.ToInt32(Console.ReadLine());
                    aesAlgorithm.KeySize = a;
                    aesAlgorithm.GenerateKey(); //Generation of a Key based on the needed length
                    string keyBase64 = Convert.ToBase64String(aesAlgorithm.Key);
                    Console.WriteLine($"Aes Key Size : {aesAlgorithm.KeySize}");
                    Console.WriteLine("Here is the Aes key in Base64:");
                    Console.WriteLine(keyBase64);

                    Console.WriteLine("Welcome to the best RTU AES encryption software");

                    Console.WriteLine("--------------------------------------------------------------");

                    Console.WriteLine("Please enter the text that you want to encrypt:");
                    string plainText = Console.ReadLine();
                    Console.WriteLine("--------------------------------------------------------------");
                    string cipherText = EncryptDataWithAes(plainText, keyBase64, out string vectorBase64);

                    

                    for (int i=0; i<3;i++)
                    {
                        Thread.Sleep(1000);
                        Console.Write(".");



                    }
                    Console.WriteLine();
                    Console.WriteLine("Done !");
                    Thread.Sleep(1000);
                    Console.WriteLine();
                    Console.WriteLine("Here is the cipher text:");
                    Console.WriteLine(cipherText);
                    Console.WriteLine("(you can now keep your bitcoin safe)");
                    Console.WriteLine();
                    Console.WriteLine("Here is the Aes IV in Base64:");
                    Console.WriteLine(vectorBase64);
                }
                if (r == 3 || r == 2)
                {
                    Console.WriteLine("Please enter the text that you want to decrypt:");
                    string cipherText = Console.ReadLine();
                    Console.WriteLine("--------------------------------------------------------------");

                    Console.WriteLine("Provide the Aes Key:");
                    string keyBase64 = Console.ReadLine();
                    Console.WriteLine("--------------------------------------------------------------");

                    Console.WriteLine("Provide the initialization vector:");
                    string vectorBase64 = Console.ReadLine();
                    Console.WriteLine("--------------------------------------------------------------");


                    string plainText = DecryptDataWithAes(cipherText, keyBase64, vectorBase64);

                    for (int i = 0; i < 3; i++)
                    {
                        Thread.Sleep(1000);
                        Console.Write(".");



                    }
                    Console.WriteLine();
                    Console.WriteLine("Done !");
                    Thread.Sleep(1000);
                    Console.WriteLine();
                    Console.WriteLine("Here is the decrypted data:");
                    Console.WriteLine(plainText);
                }
                    
            }

           
        }

            private static string EncryptDataWithAes(string plainText, string keyBase64, out string vectorBase64)
            {
                using (Aes aesAlgorithm = Aes.Create())
                {
                    aesAlgorithm.Key = Convert.FromBase64String(keyBase64);
                    aesAlgorithm.GenerateIV();
                    Console.WriteLine($"Aes Cipher Mode : {aesAlgorithm.Mode}");
                    Console.WriteLine($"Aes Padding Mode: {aesAlgorithm.Padding}");
                    Console.WriteLine($"Aes Key Size : {aesAlgorithm.KeySize}");

                    //set the parameters with out keyword
                    vectorBase64 = Convert.ToBase64String(aesAlgorithm.IV);

                    // Create encryptor object
                    ICryptoTransform encryptor = aesAlgorithm.CreateEncryptor();

                    byte[] encryptedData;

                    //Encryption will be done in a memory stream through a CryptoStream object
                    using (MemoryStream ms = new MemoryStream())
                    {
                        using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
                        {
                            using (StreamWriter sw = new StreamWriter(cs))
                            {
                                sw.Write(plainText);
                            }
                            encryptedData = ms.ToArray();
                        }
                    }

                    return Convert.ToBase64String(encryptedData);
                }
            }
        private static string DecryptDataWithAes(string cipherText, string keyBase64, string vectorBase64)
        {
            using (Aes aesAlgorithm = Aes.Create())
            {
                aesAlgorithm.Key = Convert.FromBase64String(keyBase64);
                aesAlgorithm.IV = Convert.FromBase64String(vectorBase64);

                Console.WriteLine($"Aes Cipher Mode : {aesAlgorithm.Mode}");
                Console.WriteLine($"Aes Padding Mode: {aesAlgorithm.Padding}");
                Console.WriteLine($"Aes Key Size : {aesAlgorithm.KeySize}");
                Console.WriteLine($"Aes Block Size : {aesAlgorithm.BlockSize}");


                // Create decryptor object
                ICryptoTransform decryptor = aesAlgorithm.CreateDecryptor();

                byte[] cipher = Convert.FromBase64String(cipherText);

                //Decryption will be done in a memory stream through a CryptoStream object
                using (MemoryStream ms = new MemoryStream(cipher))
                {
                    using (CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader sr = new StreamReader(cs))
                        {
                            return sr.ReadToEnd();
                        }
                    }
                }
            }
        }
    }
            
           
           
    }

        
